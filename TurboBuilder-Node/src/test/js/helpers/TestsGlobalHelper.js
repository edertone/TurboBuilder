'use strict';


const path = require('path');
const { FilesManager } = require('turbodepot-node');
const { TerminalManager } = require('turbodepot-node');


const filesManager = new FilesManager();
const terminalManager = new TerminalManager('', false);


jasmine.DEFAULT_TIMEOUT_INTERVAL = 45000;


/**
 * Helper that defines global methods to use with the turbobuilder tests
 * Helper modules are always executed once before all the tests run
 */
global.testsGlobalHelper = {


    /**
     * Execute the project main turbobuilder command via cmd with the specified arguments
     * TODO - Terminal manager class should have the ability to define executable paths and run them when necessary. If this feature is
     *        implemented, this method may become unnecessary and be replaced with a terminalmanager exec call
     */
    execTbCmd: function(cmdArguments) {
    
        return terminalManager.exec('node "' + path.resolve(__dirname + '/../../../main/js/turbobuilder.js') + '" ' + cmdArguments).output;
    },
    
    
    /**
     * Save the provided object to the setup file on the current work dir as a json string
     */
    saveToSetupFile: function(object, fileName = 'turbobuilder.json') {
    
        return filesManager.saveFile('.' + filesManager.dirSep() + fileName, JSON.stringify(object));
    },
    
    
    /**
     * Generates the specified project type on the current work dir and defines several turbobuilder.json setup
     * values.
     *
     * @param projectType THe project type we want to generate as it is specified with tb -g "projectType"
     * 
     * @param build A javascript object that defines all the configuration for the tubobuilder.json setup build section.
     *        set it to null to leave the build section as it is generated by default
     *        
     * @param copyPasteDetect A javascript object that defines all the configuration for the tubobuilder.json setup
     *        validate.filesContent.copyPasteDetect section. Set it to null to leave the build section as it is generated by default
     *
     * @return A javascript object containing the full turbobuilder.json setup as it's been defined by this method'
     */
    generateProjectAndSetup: function(projectType, build = null, copyPasteDetect = null) {
    
        expect(testsGlobalHelper.execTbCmd('-g ' + projectType)).toContain("Generated project structure ok");
            
        let setup = JSON.parse(filesManager.readFile('.' + filesManager.dirSep() + 'turbobuilder.json'));
        
        if(build !== null){
            
            setup.build = build;
        }
        
        if(copyPasteDetect !== null){
            
            setup.validate.filesContent.copyPasteDetect = copyPasteDetect;
        }
        
        expect(testsGlobalHelper.saveToSetupFile(setup)).toBe(true);
        
        return setup;
    },
    
    
    /**
     * Generate several files with the specified wildcard on a site_php project type
     */
    generateSitePhpFilesWithWildcard: function(wildCard) {
    
        expect(filesManager.saveFile('./src/main/t0.php', '<?php // 1 - ' + wildCard + ' 2 - ' + wildCard + ' ?>')).toBe(true);
        expect(filesManager.saveFile('./src/main/t1.php', '<?php $1 = "' + wildCard + '"; $2 = "' + wildCard + '" ?>')).toBe(true);
        expect(filesManager.saveFile('./src/main/t2.js', '"use strict";var a = "' + wildCard + '"; var b = "' + wildCard + '";// a - ' + wildCard + ' b - ' + wildCard)).toBe(true);
        expect(filesManager.saveFile('./src/main/t3.json', '{ "a": "' + wildCard + '", "b": "' + wildCard + '"}')).toBe(true);
        expect(filesManager.saveFile('./src/main/t4.txt', '{ "a": "' + wildCard + '", "b": "' + wildCard + '"}')).toBe(true);
    }
};